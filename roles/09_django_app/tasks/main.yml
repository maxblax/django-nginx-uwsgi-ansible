---
# ============================================
# Django Application Deployment
# ============================================
# This role deploys Django to staging or production using Docker Swarm

- name: Set environment-specific variables
  set_fact:
    env_name: "{{ environment }}"
    env_config: "{{ project_config.django[environment] }}"
    env_domain: "{{ project_config.domains[environment] }}"
    env_services: "{{ project_config.services }}"
    stack_name: "{{ environment }}_django"
    stack_root: "/opt/{{ environment }}_django"
    data_root: "/data/{{ environment }}"
    deploy_env: "{{ environment }}"

- name: Display deployment information
  debug:
    msg: |
      Deploying {{ env_name }} environment:
      - Stack: {{ stack_name }}
      - Domain: {{ env_domain.domain }}
      - Image: {{ env_config.docker_image }}
      - Replicas: {{ env_config.replicas }}

- name: Create stack directories
  file:
    path: "{{ item }}"
    state: directory
    owner: docker
    group: docker
    mode: '0750'
  loop:
    - "{{ stack_root }}"
    - "{{ data_root }}/static"
    - "{{ data_root }}/media"
    - "{{ data_root }}/redis"
  become: yes

- name: Create environment file
  template:
    src: env.j2
    dest: "{{ stack_root }}/.env"
    owner: docker
    group: docker
    mode: '0600'
  become: yes

- name: Template Docker Compose file
  template:
    src: docker-compose.yml.j2
    dest: "{{ stack_root }}/docker-compose.yml"
    owner: docker
    group: docker
    mode: '0640'
  become: yes
  become_user: docker

- name: Template Nginx configuration
  template:
    src: nginx.conf.j2
    dest: "{{ stack_root }}/nginx.conf"
    owner: root
    group: docker
    mode: '0644'
  become: yes

- name: Get current image digest (if exists)
  shell: docker image inspect {{ env_config.docker_image }} --format='{{ '{{' }}index .RepoDigests 0{{ '}}' }}' 2>/dev/null || echo "none"
  register: current_digest
  changed_when: false
  become: yes

- name: Force pull latest image
  shell: docker pull {{ env_config.docker_image }}
  register: pull_result
  changed_when: "'Downloaded newer image' in pull_result.stdout or 'Pulling from' in pull_result.stdout"
  become: yes

- name: Get new image digest
  shell: docker image inspect {{ env_config.docker_image }} --format='{{ '{{' }}index .RepoDigests 0{{ '}}' }}'
  register: new_digest
  changed_when: false
  become: yes

- name: Display image update status
  debug:
    msg: |
      Image update status:
      - Old digest: {{ current_digest.stdout }}
      - New digest: {{ new_digest.stdout }}
      - Image changed: {{ current_digest.stdout != new_digest.stdout }}

- name: Deploy stack using Docker Compose
  community.docker.docker_stack:
    state: present
    name: "{{ stack_name }}"
    compose:
      - "{{ stack_root }}/docker-compose.yml"
  become: yes

- name: Force update service if image digest changed
  shell: docker service update --force --image {{ env_config.docker_image }} {{ stack_name }}_app
  become: yes
  when: current_digest.stdout != new_digest.stdout
  ignore_errors: true

- name: Wait for stack to be deployed
  pause:
    seconds: 10

- name: Wait for collectstatic to complete
  wait_for:
    path: "{{ data_root }}/static/admin"
    state: present
    timeout: 60
  become: yes
  ignore_errors: yes

- name: Fix static files permissions
  file:
    path: "{{ data_root }}/static"
    owner: root
    group: docker
    mode: '0755'
    recurse: yes
  become: yes

- name: Get list of services in the stack
  command: docker stack services {{ stack_name }} --format '{{"{{"}}.Name{{"}}"}}'
  register: stack_services
  become: yes
  changed_when: false

- name: Display stack services
  debug:
    var: stack_services.stdout_lines

- name: Check services status in the Docker stack
  shell: |
    docker stack ps {{ stack_name }} --format '{{"{{"}}.Name{{"}}"}}: {{"{{"}}.CurrentState{{"}}"}}'
  register: services_status
  become: yes
  changed_when: false
  ignore_errors: yes

- name: Display services status
  debug:
    var: services_status.stdout_lines
  when: services_status is defined

- name: Display deployment summary
  debug:
    msg: |
      ========================================
      Deployment completed for {{ env_name }}!
      ========================================

      Stack name: {{ stack_name }}
      Domain: {{ env_domain.domain }}

      Check status:
        docker stack ps {{ stack_name }}

      View logs:
        docker service logs {{ stack_name }}_app -f

      Scale services:
        docker service scale {{ stack_name }}_app={{ env_config.replicas }}

      ========================================
